gfg-----------HARD------------>Max Circular Subarray Sum  //kadane's algorithum used
class Solution{
    
      public int normal_sum(int[] arr,int n){
          int result=arr[0];
        int max_ending=arr[0]; 
      
        for(int i=1; i<n ;i++){
            max_ending=Math.max(arr[i],max_ending+arr[i]);
            result=Math.max(result, max_ending);
        }
        
        return result;     //kadane's algorithum (give maximum sum of sub-arry *normal)
    }

    // a: input array
    // n: size of array
    //Function to find maximum circular subarray sum.
    public int circularSubarraySum(int a[], int n) {
        int kadane=normal_sum(a,n);
         if(kadane <0) return kadane;
         int total_sum=0;
         for(int i=0;i<n;i++){
              total_sum+=a[i];
              a[i]=-a[i];   //invert array
         }
         int reverseKadane=total_sum+normal_sum(a,n);  //subtract invert max sum from tatal  - - = +
        return Integer.max(kadane, reverseKadane);
    }
    
}

