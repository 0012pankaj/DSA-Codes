
//using recursion

class Solution
{
    public static void findnewstack(Stack<Integer> s,int sizeOfStack,int count)
    {
        //base condition  
        if(count == sizeOfStack/2)
        {
           s.pop();
           return;
        }
        
        int num=s.peek();
        s.pop();
        
        //recursive call
         findnewstack(s,sizeOfStack,count+1);
         
         // when came bac after moving middle element add all which we remove earliar before middle
         
         s.push(num);
        
        
    }
    
    //Function to delete middle element of a stack.
    
    public void deleteMid(Stack<Integer>s,int sizeOfStack){
        // code here
        int count=0;
        findnewstack(s,sizeOfStack,count);
    } 
}
....................................................................

Input: 
Stack = {1, 2, 3, 4, 5}
Output:
ModifiedStack = {1, 2, 4, 5}
Explanation:
As the number of elements is 5 , 
hence the middle element will be the 3rd
element which is deleted

