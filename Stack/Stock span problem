Input: 
N = 7, price[] = [100 80 60 70 60 75 85]
Output:
1 1 1 2 1 4 6
Explanation:
Traversing the given input span for 100 
will be 1, 80 is smaller than 100 so the 
span is 1, 60 is smaller than 80 so the 
span is 1, 70 is greater than 60 so the 
span is 2 and so on. Hence the output will 
be 1 1 1 2 1 4 6.

_--------------------------------------------------------------------------------------------
class Solution
{
    //Function to calculate the span of stockâ€™s price for all n days.
    public static int[] calculateSpan(int price[], int n)
    {
        //step 1
        Stack<Integer> stk =new Stack<Integer>();
        int ans[]=new int[n];
        
        stk.push(0);
        ans[0]=1;
        
        //step 2:pop
        for(int i=1 ;i<n;i++){
        
        while((!stk.isEmpty()) && (price[stk.peek()] <= price[i])){
            stk.pop();
        }
        
        // step 3:calculate
        ans[i]=(stk.isEmpty())? (i+1): (i-stk.peek()) ;
        
        //push
        stk.push(i);
        
        }
        
        return ans;
        
    }
    
}
----------------------------------------------------------------------O(n)   ,  O(n)
Create a stack of type int and push 0 in it
Set the answer of day 1 as 1 and run a for loop to traverse the days
While the stack is not empty and the price of st.top is less than or equal to the price of the current day, pop out the top value
Set the answer of the current day as i+1 if the stack is empty else equal to i – st.top
Push the current day into the stack
Print the answer using the answer array
