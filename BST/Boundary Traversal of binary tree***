
class Solution
{    boolean isLeaf(Node root)
     {  return (root.left == null) && (root.right == null);
     }
    void leftboundary(Node node,ArrayList<Integer> ans)
    {   Node cur=node.left;
      while(cur !=null)
      {
        if(isLeaf(cur)==false) ans.add(cur.data);
        
        if(cur.left !=null) cur =cur.left;
        else
          cur=cur.right;
       }
    }
    
     void leafboundary(Node node,ArrayList<Integer> ans)
     {   
         if(isLeaf(node))
         {
             ans.add(node.data);
             return;
         }
           if (node.left != null) leafboundary(node.left,ans);
        if (node.right != null)  leafboundary(node.right,ans);
        
     }
     
     void rightboundary(Node node,ArrayList<Integer> ans)
     {
         Stack<Integer> stk=new Stack<Integer>();
         Node curr=node.right;
         while(curr != null)
         {
             if(!isLeaf(curr)) stk.push(curr.data);
             if(curr.right !=null) curr=curr.right;
             else 
             curr=curr.left;
         }
         
         while(!stk.isEmpty())
         {
             ans.add(stk.pop());
         }
     }
    
    
	ArrayList <Integer> boundary(Node node)
	{   
	    
	    ArrayList<Integer> ans =new ArrayList<Integer>();
	    if(node==null) return ans;
	    if(!isLeaf(node)) ans.add(node.data);
	    leftboundary(node,ans);
	    leafboundary(node,ans);
	    rightboundary(node,ans);
	    
	    return ans;
	}
}
