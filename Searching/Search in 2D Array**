sol 1: Start from Top Right corner
# this solution work on every 2d search

class Solution {  // TC-> O(n+m)
    public boolean searchMatrix(int[][] matrix, int target) {
        int r = 0;
        int c = matrix[0].length-1;
    while(r<matrix.length && c>=0){
            if(matrix[r][c] == target) return true;
            else if(matrix[r][c] < target) r++;
            else c--;
        }
        return false;
}
}
//Bineary Search Not Work why -
// The first integer of each row is NOT greater 
// than the last integer of the previous row. 
//CHECK 74. Search a 2D Matrix

//why this Approch:- 
// Integers in each column are sorted in ascending from top to bottom.
-----------------------------------------------------------------------------------------------------

sol 2: if The first integer of each row is greater 
than the last integer of the previous row.  // Apply binary search: log(n*m) : 

class Solution {                          
    public boolean searchMatrix(int[][] matrix, int target) {

int n = matrix.length;
int m = matrix[0].length;        
int low = 0, high = n * m - 1;
while (low <= high) {
    int mid = (low + high) / 2;
    int row = mid / m, col = mid % m; // /->row  %-> col
    if (matrix[row][col] == target)
        return true;
    else if (matrix[row][col] < target)
        low = mid + 1;
    else
        high = mid - 1;
}
return false;

    }
}


/* Why BS->
The first integer of each row is greater 
than the last integer of the previous row.

sol 2 : in LC Notes check

ALSO CHECK 240. Search a 2D Matrix II */ 
