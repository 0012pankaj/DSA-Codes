//On   Hacker block ,codingBlock 
A subsequence is a sequence that can be derived from another sequence 
by deleting some elements without changing the order of the remaining
elements. For example, the sequence {A,B,D} is a subsequence of 
{A,B,C,D,E,F}, obtained after removal of elements C, E and F.

Given two strings A and B of size n and m respectively, you have 
to print the Longest Common Subsequence(LCS) of strings A and B, 
where LCS is the longest sequence present in both A and B.

Note: It is gauranteed that there is only one unique longest common subsequence

Input Format
Two strings A and B.

Constraints
1 <= n,m <= 10^3

Output Format
Output the LCS of A and B.

Sample Input
abc
acd
Sample Output
ac
____________________________________________________________________________________________________________________________________
import java.util.*;
public class Main {
   public static void main(String args[]) {
        // Your Code Here
        Scanner sc=new Scanner(System.in);
        String a=sc.next();
        String b=sc.next();
        int DP[][]=new int[a.length()+1][b.length()+1];
        for(int i=1;i<DP.length;i++){
            for(int j=1;j<DP[0].length;j++){
                if(a.charAt(i-1)==b.charAt(j-1)){
                    DP[i][j]=1+DP[i-1][j-1];
                }
                else {
                    DP[i][j]=Math.max(DP[i-1][j],DP[i][j-1]);
                }
            }
        }
        String res_str="";
        int i=DP.length-1,j=DP[0].length-1;
        while(i>0&&j>0){
            if(a.charAt(i-1)==b.charAt(j-1)){
                res_str=a.charAt(i-1)+res_str;
                i--;
                j--;
            }
            else if(DP[i][j]==DP[i][j-1]){
                j--;
            }
            else i--;
        }
        System.out.println(res_str);
    }
}
