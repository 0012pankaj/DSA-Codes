Given two strings. The task is to find the length of the longest common substring.


Example 1:

Input: S1 = "ABCDGH", S2 = "ACDGHR", n = 6, m = 6
Output: 4
Explanation: The longest common substring
is "CDGH" which has length 4.
Example 2:

Input: S1 = "ABC", S2 "ACB", n = 3, m = 3
Output: 1
Explanation: The longest common substrings
are "A", "B", "C" all having length 1.

Your Task:
You don't need to read input or print anything.
Your task is to complete the function longestCommonSubstr() 
which takes the string S1, string S2 and their length n and m as inputs and returns the length of the longest common substring in S1 and S2.


Expected Time Complexity: O(n*m).
Expected Auxiliary Space: O(n*m).


Constraints:
1<=n, m<=1000

--------------------------------------------------------------------------------------------------------------------------

/* ans=Math.max(ans,dp[i][j]); change in LCS take ans variable and compute max ans value
 //no else statment required
 */

class Solution{
    int longestCommonSubstr(String s1, String s2, int x, int y){
       
        
         int dp[][]=new int[x+1][y+1];
        
        //fill first row and col with 0
        for(int i=0;i<x;i++){
            dp[i][0]=0;
        }
        for(int i=0;i<y;i++){
            dp[0][i]=0;
        }
        
        //main logic to fill remaining dp and get ans at dp[x][y] 
        int ans=0;
        for(int i=1;i<=x;i++){
            for(int j=1;j<=y;j++){
                
                if(s1.charAt(i-1) == s2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                    ans=Math.max(ans,dp[i][j]);  // change in LCS take ans variable and compute max ans value
                }                               //no else statment required 
            }
        }
        
        return ans;
    }
}
