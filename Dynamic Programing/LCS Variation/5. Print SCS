//Leetcode 1092
Given two strings str1 and str2, return the shortest string that 
has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t
(possibly 0) results in the string s.

 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
Example 2:

Input: str1 = "aaaaaaaa", str2 = "aaaaaaaa"
Output: "aaaaaaaa"
 

Constraints:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of lowercase English letters.

___________________________________________________________________________________________________

class Solution {
    public String shortestCommonSupersequence(String a, String b) {
     
     // LCS code:-
     int dp[][]=new int[a.length()+1][b.length()+1];

       for(int i=1;i<dp.length;i++){
            for(int j=1;j<dp[0].length;j++){

                if(a.charAt(i-1)==b.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else {
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
      
      //LCS print like code:-
        String res_str="";
        int i=dp.length-1;
        int j=dp[0].length-1;

        while(i>0 && j>0){
            if(a.charAt(i-1)==b.charAt(j-1)){
                res_str=a.charAt(i-1)+res_str;
                i--;
                j--;
            }
            else if(dp[i][j]==dp[i][j-1]){
                 res_str=b.charAt(j-1)+res_str; //change +add
                j--;
            }
            else{
                res_str=a.charAt(i-1)+res_str; //change +add
                i--;
            } 
        }
        
        //change add+ in print Lcs for scs
        while(i>0){
             res_str=a.charAt(i-1)+res_str;
             i--;
        }
        while(j>0){
             res_str=b.charAt(j-1)+res_str;
             j--;
        }

       
                          //return resultant string
        return res_str;
    }
}


//fore refrence of Print Lcs check leetcode notes
