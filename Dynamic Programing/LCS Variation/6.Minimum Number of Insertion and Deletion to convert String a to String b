leetcode 583. Delete Operation for Two Strings

Given two strings word1 and word2, return the minimum number
of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.
Example 1:

Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Example 2:

Input: word1 = "leetcode", word2 = "etco"
Output: 4
 

Constraints:

1 <= word1.length, word2.length <= 500
word1 and word2 consist of only lowercase English letters.
________________________________________________________________________________________________
class Solution { //variation of LCS 
    public int minDistance(String word1, String word2) {
                                                          //1.find LCS
        int LCS=lcs(word1.length(),word2.length(),word1,word2);
        
                                                           //2.subtract LCS from both string's Length and add 
        return  (word1.length()-LCS)+(word2.length()-LCS);
    }

     static int lcs(int x, int y, String s1, String s2)
    {
        int dp[][]=new int[x+1][y+1];
        
        //fill first row and col with 0
        for(int i=0;i<x;i++){
            dp[i][0]=0;
        }
        for(int i=0;i<y;i++){
            dp[0][i]=0;
        }
        
        //main logic to fill remaining dp and get ans at dp[x][y] 
        
        for(int i=1;i<=x;i++){
            for(int j=1;j<=y;j++){
                
                if(s1.charAt(i-1) == s2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }else{
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        
        return dp[x][y];
        
    }
}
/* Approch:-
1.find LCS
2.subtract LCS from both string's Length and add 
(l1-LCS)+(l2-LCS)=result */
