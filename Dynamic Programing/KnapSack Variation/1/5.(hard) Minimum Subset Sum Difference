#gfg   Minimum sum partition


Given an array arr of size n containing non-negative integers,
the task is to divide it into two sets S1 and S2 such that the
absolute difference between their sums is minimum and find the minimum difference


Example 1:

Input: N = 4, arr[] = {1, 6, 11, 5} 
Output: 1
Explanation: 
Subset1 = {1, 5, 6}, sum of Subset1 = 12 
Subset2 = {11}, sum of Subset2 = 11   
Example 2:
Input: N = 2, arr[] = {1, 4}
Output: 3
Explanation: 
Subset1 = {1}, sum of Subset1 = 1
Subset2 = {4}, sum of Subset2 = 4

Your Task:  
You don't need to read input or print anything. Complete the function minDifference()
which takes N and array arr as input parameters and returns the integer value


Expected Time Complexity: O(N*|sum of array elements|)
Expected Auxiliary Space: O(N*|sum of array elements|)


Constraints:
1 ≤ N*|sum of array elements| ≤ 106
0 < arr[i] <= 105
__________________________________________________________________________________________________________

class Solution
{

	public int minDifference(int arr[], int N) 
	{ 
	    //1.calculate total sum /Range
        
        int sum=0;
        for(int i: arr){
                sum+=i;
        }

        //2.use (subset sum Problem)code. to fill dp use sum
         boolean  dp[][] =new boolean[N+1][sum+1];
                                                         //Initialse dp 
        for(int i=0;i<N+1;i++){
             for(int j=0;j<sum+1; j++){
                 if(i==0){
                     dp[i][j]=false;
                 }
                 if(j==0){
                      dp[i][j]=true;
                 }
             }
         }
         
                              //fill dp acc to choice
         
          for(int i=1;i<N+1;i++){
             for(int j=1;j<sum+1; j++){
                if(arr[i-1] <= j){  //pick            //not pick
                        dp[i][j]=dp[i-1][j-arr[i-1]] ||dp[i-1][j]; 
                }else{
                         dp[i][j]=dp[i-1][j];                  //not pick item is greater
                }
             }
         }
         
        
    
        //3. extract values of j (ranges from 0 to sum/2 ) if true in arrayList 
        ArrayList<Integer> al=new ArrayList<>();
        for(int j=0;j<=(sum)/2;j++){
            if(dp[N][j]!=false){
                al.add(j);
            }
        } 
          
        //4.Calculate min diff using arraylist and sum [sum- 2*s1],Al contains posible subset sum value
        int mn=Integer.MAX_VALUE;
        for(int i=0;i<al.size();i++){
            mn=Math.min(mn,sum- 2*al.get(i));
        }

        return mn;
    }

}

