gfg->
Given a rod of length N inches and an array of prices, price[]. 
price[i] denotes the value of a piece of length i. Determine the 
maximum value obtainable by cutting up the rod and selling the pieces.

Note: Consider 1-based indexing.

Example 1:

Input:
N = 8
Price[] = {1, 5, 8, 9, 10, 17, 17, 20}
Output:
22
Explanation:
The maximum obtainable value is 22 by 
cutting in two pieces of lengths 2 and 
6, i.e., 5+17=22.
Example 2:

Input:
N=8
Price[] = {3, 5, 8, 9, 10, 17, 17, 20}
Output: 
24
Explanation: 
The maximum obtainable value is 
24 by cutting the rod into 8 pieces 
of length 1, i.e, 8*price[1]= 8*3 = 24. 
Your Task:  
You don't need to read input or print anything. Your task is to complete the 
function cutRod() which takes the array A[] and its size N as inputs and returns 
the maximum price obtainable.

Expected Time Complexity: O(N2)
Expected Auxiliary Space: O(N)

Constraints:
1 ≤ N ≤ 1000
1 ≤ Ai ≤ 105
_____________________________________________________________________________________________

class Solution{
    public int cutRod(int price[], int n) {
        //code here
        //1.create length array
        int length[]=new int[n];
        for(int i=1;i<=n;i++){
            length[i-1]=i;
        }
        
        //2. call unbounded KnapScak
        int res=Unbounded_knapSack(n, n, price, length);
        
        return res;
    }          //#change in Names only W->n ,val->price , wt-> length


    //code with nochange---------->
     static int Unbounded_knapSack(int n, int W, int val[], int wt[])
    {
        // code here->
        
          int dp[][]=new int[n+1][W+1];
                                            //1.initialization acc to base case
         for(int i=0;i<n+1;i++){
             for(int j=0;j<W+1; j++){
                 if(i==0||j==0){
                     dp[i][j]=0;
                 }
             }
         }
         
                                                      //fill dp using choice digram
         
          for(int i=1;i<n+1;i++){
             for(int j=1;j<W+1; j++){
                 
                 if(wt[i-1]<= j){                               //pick
                     dp[i][j]=Math.max(val[i-1]+dp[i][j-wt[i-1]],     
                                                  dp[i-1][j]  );//not pick
                    }else{
                        dp[i][j]=dp[i-1][j];//not pick;
                    }
             }
         }
         
         
         return dp[n][W];
    }
}
