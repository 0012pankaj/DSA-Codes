

leetcode-->322. Coin Change
You are given an integer array coins representing coins of different denominations 
and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. 
If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1
Example 3:

Input: coins = [1], amount = 0
Output: 0
 

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104

_______________________________________________________________________________________________________________________________
class Solution {         //variation of unboundeknapscack as infinite supply 
    public int coinChange(int[] coins, int amount) {
         int W=amount;
        int n=coins.length;
           int dp[][]=new int[n+1][W+1];
                                            //1.initialization acc to base case
         for(int i=0;i<n+1;i++){
             for(int j=0;j<W+1; j++){
                
                  if(j==0){                 // #1.change in initialize j==0 ,0
                     dp[i][j]=0;
                 }
                  if(i==0){                 // #2.change in initialize i==0 ,Integer.MAX_VALUE-1
                     dp[i][j]=Integer.MAX_VALUE-1;
                 }
             }
         }
         
                                                      //fill dp using choice digram
         
          for(int i=1;i<n+1;i++){
             for(int j=1;j<W+1; j++){
                 
                 if(coins[i-1]<= j){       //pick
                     dp[i][j]=Math.min(dp[i][j-coins[i-1]] + 1 , dp[i-1][j])  ;  //3. change use min and +1 for pic
                                                                  //not pick 
                                                 
                    }else{
                        dp[i][j]=dp[i-1][j];//not pick;
                    }
             }
         }
         
         if(dp[n][W]==Integer.MAX_VALUE-1) return -1;
         
         return dp[n][W];
    }
}
