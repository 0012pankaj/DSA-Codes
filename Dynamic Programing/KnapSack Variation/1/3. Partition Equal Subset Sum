//gfg
//Similar to subset sum

Given an array arr[] of size N, check if it can be partitioned into
two parts such that the sum of elements in both parts is the same.

Example 1:

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explanation: 
The two parts are {1, 5, 5} and {11}.
Example 2:

Input: N = 3
arr = {1, 3, 5}
Output: NO
Explanation: This array can never be 
partitioned into two such parts.
Your Task:
You do not need to read input or print anything. Your task is to complete the 
function equalPartition() which takes the value N and the array as input parameters 
and returns 1 if the partition is possible. Otherwise, returns 0.

Expected Time Complexity: O(N*sum of elements)
Expected Auxiliary Space: O(N*sum of elements)

Constraints:
1 ≤ N ≤ 100
1 ≤ arr[i] ≤ 1000
N*sum of elements ≤ 5*106
__________________________________________________________________________________________________________________
class Solution{          // tabulation Approch used
    static int equalPartition(int N, int arr[])
    {
        //1. find total sum
        int sum=0;
        boolean res=false;
        for(int i:arr) sum+=i;
        
        //2. check even/odd 
        if(sum%2 != 0){
            return 0;
        }
        else{
            //if even find SubsetSumProblem of given array and sum/2;
            res=isSubsetSum(N,arr,sum/2);
            
        }
        
        
        return res==false?0 :1 ;
        
    }
      
      //3.SubsetSumProblem--------->
       static Boolean isSubsetSum(int N, int arr[], int sum){
      
       boolean  dp[][] =new boolean[N+1][sum+1];
                                                         //Initialse dp 
        for(int i=0;i<N+1;i++){
             for(int j=0;j<sum+1; j++){
                 if(i==0){
                     dp[i][j]=false;
                 }
                 if(j==0){
                      dp[i][j]=true;
                 }
             }
         }
         
                                                                       //fill dp acc to choice
         
          for(int i=1;i<N+1;i++){
             for(int j=1;j<sum+1; j++){
                if(arr[i-1] <= j){  //pick            //not pick
                        dp[i][j]=dp[i-1][j-arr[i-1]] ||dp[i-1][j]; 
                }else{
                         dp[i][j]=dp[i-1][j];                  //not pick item is greater
                }
             }
         }
         
         return dp[N][sum];
    }
}
