#gfg 0 - 1 Knapsack Problem 
You are given weights and values of N items, put these items in a knapsack
of capacity W to get the maximum total value in the knapsack. Note that we have
only one quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] 
which represent values and weights associated with N items respectively.
Also given an integer W which represents knapsack capacity, find out the
maximum value subset of val[] such that sum of the weights of this subset is 
smaller than or equal to W. You cannot break an item, either pick the complete item
or dont pick it (0-1 property).

Example 1:

Input:
N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3
Explanation: Choose the last item that weighs 1 unit and holds a value of 3. 
Example 2:

Input:
N = 3
W = 3
values[] = {1,2,3}
weight[] = {4,5,6}
Output: 0
Explanation: Every item has a weight exceeding the knapsack's capacity (3).
Your Task:
Complete the function knapSack() which takes maximum capacity W, weight array wt[], value array val[], and the number of items n as a parameter and returns the maximum possible value you can get.

Expected Time Complexity: O(N*W).
Expected Auxiliary Space: O(N*W)

Constraints:
1 ≤ N ≤ 1000
1 ≤ W ≤ 1000
1 ≤ wt[i] ≤ 1000
1 ≤ v[i] ≤ 1000
________________________________________________________________________________
class Solution  //Approch 1 Memoization tc->O(n*W)                   O(n)//stack space extra
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int dp[][]=new int[n+1][W+1];
        for(int[] r:dp){
            Arrays.fill(r,-1);
        }
        
        return solve(W,wt,val,n,dp);
         
    } 
    
    static int solve(int W, int wt[], int val[], int n,int[][]dp){
        if( W==0 ||n==0){
            return 0;
        }
        
        if(dp[n][W]!=-1) 
           return dp[n][W];
        
        if(wt[n-1]<= W){                               //pick
            return dp[n][W]=Math.max(val[n-1]+solve( W-wt[n-1],wt,val,n-1,dp),
                                                    solve( W,wt,val,n-1,dp));
        }                                           //not pick
        
           return dp[n][W]= solve( W,wt,val,n-1,dp);
                                        //not pick if not fit in proper
        
    }
_________________________________________________________________________________________________________________

class Solution  //Approch 2 Tabulation tc->O(n*W) sp->O(n*W) NO stack space
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         int dp[][]=new int[n+1][W+1];
                                            //1.initialization acc to base case
         for(int i=0;i<n+1;i++){
             for(int j=0;j<W+1; j++){
                 if(i==0||j==0){
                     dp[i][j]=0;
                 }
             }
         }
         
                                                      //fill dp using choice digram
         
          for(int i=1;i<n+1;i++){
             for(int j=1;j<W+1; j++){
                 
                 if(wt[i-1]<= j){                               //pick
                     dp[i][j]=Math.max(val[i-1]+dp[i-1][j-wt[i-1]],
                                                  dp[i-1][j]  );//not pick
                    }else{
                        dp[i][j]=dp[i-1][j];//not pick;
                    }
             }
         }
         
         
         return dp[n][W];
    } 
}
