leetcode-->518. Coin Change II
You are given an integer array coins representing coins of different
denominations and an integer amount representing a total amount of money.

Return "the number of combinations/Ways "that make up that amount. If 
that amount of money cannot be made up by any combination of the coins, return 0.

You may assume that you have an infinite number of each kind of coin.

The answer is guaranteed to fit into a signed 32-bit integer.

 

Example 1:

Input: amount = 5, coins = [1,2,5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
Example 2:

Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.
Example 3:

Input: amount = 10, coins = [10]
Output: 1
 

Constraints:

1 <= coins.length <= 300
1 <= coins[i] <= 5000
All the values of coins are unique.
0 <= amount <= 5000
 ________________________________________________________________________________________________________________________________________
 /* variation of unbounded Knapsack only change --> No Val arr, target amount==> W , wt==>coins
  as  given   [Return the number of combinations] #no of ways so use + instrd of calculated max 
  and use i not i-1 #infinite supply*/ 
//  similar to Count of Subsets Sum  code approch

class Solution { 
                  
    public int change(int amount, int[] coins) {
        int W=amount;
        int n=coins.length;
           int dp[][]=new int[n+1][W+1];
                                            //1.initialization acc to base case
         for(int i=0;i<n+1;i++){
             for(int j=0;j<W+1; j++){
                 if(i==0){           
                     dp[i][j]=0;
                 }
                  if(j==0){                 // #1.change in initialize j==0 ,1
                     dp[i][j]=1;
                 }
             }
         }
         
                                                      //fill dp using choice digram
         
          for(int i=1;i<n+1;i++){
             for(int j=1;j<W+1; j++){
                 
                 if(coins[i-1]<= j){       //pick
                     dp[i][j]=dp[i][j-coins[i-1]] + dp[i-1][j]  ;  //2. change use + not max , no Val req.
                                                 //not pick 
                                                 
                    }else{
                        dp[i][j]=dp[i-1][j];//not pick;
                    }
             }
         }
         
         
         return dp[n][W];
    }
}
