gfg ->Partitions with Given Difference

Given an array arr, partition it into two subsets(possibly empty) such that their union is 
the original array. Let the sum of the element of these two subsets be S1 and S2. 

Given a difference d, count the number of partitions in which S1 is greater than or equal to S2
and the difference S1 and S2 is equal to d. since the answer may be large return it modulo 109 + 7.

Example 1:

Input:
n = 4, d = 3
arr[] =  { 5, 2, 6, 4}
Output:
1
Explanation:
There is only one possible partition of this array. Partition : {6, 4}, {5, 2}. 
The subset difference between subset sum is: (6 + 4) - (5 + 2) = 3.
Example 2:

Input:
n = 4, d = 0 arr[] = {1, 1, 1, 1} Output: 6 
Your Task:
You don't have to read input or print anything. Your task is to complete the function 
countPartitions() which takes the integer n and d and array arr and returns the count of partitions.

Constraint:
1 <= n <= 500
0 <= d  <= 2500
0 <= arr[i] <= 50

Expected Time Complexity: O( N * MAX_SUM), where N and MAX_SUM denote the number of elements
in the array and the maximum possible sum of array elements.
Expected Space Complexity: O( N * MAX_SUM
____________________________________________________________________

#Similar to count sum only need to calculate totalsum/2 for passing in countsubsetsum' sum
and check extra case that if totla sum is odd then return 0 

class Solution{
     //strat-->
    public int countPartitions(int n, int d, int arr[]){
     
        //1. calculate req_sum
        int arrsum=0;
        for(int i :arr) arrsum+=i;
        int sum=(d+arrsum); //totla sum
        if(sum%2==1)return 0; //extra condition
        
        //2.all CountSubsetSum with this sum 
      return  CountSubsetSum(arr,n,sum/2);
        
    }
    
    //2.CountSubsetSum sode
    public int CountSubsetSum(int arr[],int N, int sum) 
	{ 
	     int  dp[][] =new int[N+1][sum+1]; //1.change bool->int
         int mod=1000_000_007;                                            
        for(int i=0;i<N+1;i++){
             for(int j=0;j<sum+1; j++){
                 if(i==0){
                     dp[i][j]=0;
                 }
                 if(j==0){
                      dp[i][j]=1;
                 }
             }
         }
         
                                                                      
         
          for(int i=1;i<N+1;i++){
             for(int j=0;j<sum+1; j++){  //2.change start j loop with 0 insted of 1
                if(arr[i-1] <= j){  //pick            //not pick
                        dp[i][j]=(dp[i-1][j-arr[i-1]] + dp[i-1][j])% mod; //3.change || --> +
                }else{
                         dp[i][j]=dp[i-1][j];                  //not pick item is greater
                }
             }
         }
         
         return dp[N][sum];
	} 
}
