 //Function to return a list containing the level order 
    //traversal in spiral form.	 

class Spiral
{  
    public static void callzigzag(Node root,ArrayList<Integer> list)
    {    if(root==null) return;
  
        Stack<Node> s1 =new Stack<Node>();
        Stack<Node> s2 =new Stack<Node>();
        s1.push(root);

        while(!s1.isEmpty() || !s2.isEmpty() )
        {
          
            while(!s1.isEmpty())
            {   
                Node node=s1.pop();
               
                if(node.right!= null) s2.push(node.right);
                 if(node.left != null) s2.push(node.left);
                list.add(node.data);
            }
          

            if(s1.isEmpty() && s2.isEmpty()){   //important to give this condition
                break;}
         
        
              while(!s2.isEmpty())
            {   
                Node node=s2.pop();
              
                if(node.left!=null) s1.push(node.left);
                  if(node.right!= null) s1.push(node.right);
               
                list.add(node.data);
            }

                
        }
    }
    
    
   //Start------------>
    ArrayList<Integer> findSpiral(Node root) 
    {    
        ArrayList<Integer> list=new ArrayList<Integer>();
        callzigzag(root,list);
        
        return list;
    }
    
   
}

__________________________________

/* Algorithum:-
1.Push the root to the stack s1
2.While any of the two stacks is not empty
    2.1, While s1 is not empty
             a, Take out a node and add it in inner list
              b. Push children of the taken out node into s2
    2.2,While s2 is not empty
               a. Take out a node and add it in inner list
               b. Push children of the taken out node into s1 in reverse order
              i.e from right to left */
