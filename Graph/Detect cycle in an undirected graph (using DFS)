// Function to detect cycle in an undirected graph.
/*Approch if next node is visitid already and 
its parent node is note current node that mean it is wisited by some other node 
hence it is cyclic */

//USING DFS ALGORETHUM

class Solution {
  
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        
        boolean visited[]=new boolean[V];
        
        //loop for andel different components of graph    
        for(int i=0;i<V;i++){
            if(visited[i]==false)
            {
                if(detectcycleDFS(i,-1,adj,visited)) return true;
            }
        }
    return false;
    }
    
    public boolean detectcycleDFS(int src,int parent,ArrayList<ArrayList<Integer>> adj,boolean[] visited)
    {  //DFS ALGORETHUM
        
        visited[src]=true;
            
            for(Integer item:adj.get(src)){
                if(visited[item]==false){
                   if(detectcycleDFS(item,src,adj,visited)) return true;
                   
                }
                else if(item != parent) return true; //main condition
            }
            
    
        return false;
    }
}
