/////////do 'O' 'X' before this similar approch


class Solution {

    int numberOfEnclaves(int[][] board) {
     
     
       int n=board.length;
        int m=board[0].length;

        boolean visited[][]=new boolean[n][m];

        int rr[]={1,-1,0,0};
        int cc[]={0,0,-1,1};
  //top row and last row
        for(int i=0;i<m;i++){
            if( board[0][i]==1&& visited[0][i]==false){
                calldfs(0,i,board,visited,rr,cc);
            }

            if(board[n-1][i]==1 && visited[n-1][i]==false){
                 calldfs(n-1,i,board,visited,rr,cc);
            }
        }

    //first and last col    

         for(int i=0;i<n;i++){
            if( board[i][0]==1 && visited[i][0]==false){
                calldfs(i,0,board,visited,rr,cc);
            }

            if(board[i][m-1]==1 && visited[i][m-1]==false){
                 calldfs(i,m-1,board,visited,rr,cc);
            }
        }

        int count=0;
          for(int i=0;i<n;i++){
         for(int j=0;j<m;j++){
             if(board[i][j]==1 && visited[i][j]==false  ){
                count++;
             }
         }
     } 

     return count;
    }
    
     public static void calldfs(int row,int col,int[][] board,boolean[][] visited,int[] rr,int[] cc){
        visited[row][col]=true;
        int n=board.length;
        int m=board[0].length;

        for(int i=0;i<4;i++){
            int r=row+rr[i];
            int c=col+cc[i];

            if(r>=0 &&c>=0 && r<n && c<m && board[r][c]==1 &&  visited[r][c]==false){
                 calldfs(r,c,board,visited,rr,cc);
            }
        }

    }
}
