class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Dfs Approch
        boolean visited[]=new boolean[V];
        ArrayList<Integer> dfs=new ArrayList<Integer>();
        visited[0]=true;
        
        dfsG(0,visited,adj,dfs);
        
        return dfs;
    }
    
    public static void dfsG(int node , boolean[] visited , ArrayList<ArrayList<Integer>> adj,ArrayList<Integer> dfs)
    {
        visited[node]=true;
        dfs.add(node);
        
        //visit all its adjecent
        for(Integer item: adj.get(node))
        {
            if(visited[item]==false)
            {
                 dfsG(item,visited,adj,dfs);
            }
        }
    }
}
______________________________
Sp-->O(n)
Tc-->O(n)+O(2E)
