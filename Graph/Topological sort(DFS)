
class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        Stack<Integer> stk=new Stack<Integer>();
        boolean[] visited=new boolean[V];
        
        //for handel different componenet
        for(int i=0;i<V;i++){
            if(visited[i]==false){
                calldfs(i,adj,visited,stk);
            }
        }
        
        int[] ans=new int[V];
        int x=0;
        while(!stk.isEmpty()){
            ans[x++]=stk.pop();
        }
        
        return ans;
    }
    
    public static void calldfs(int node,ArrayList<ArrayList<Integer>> adj,boolean[] visited,Stack<Integer> stk)
    {
        visited[node]=true;
        
        for(Integer item: adj.get(node)){
            if(visited[item]==false){
                 calldfs(item,adj,visited,stk);
              }
             
        }
        stk.push(node);
    }
}
